{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-05-12T06:57:14.726893Z", "invocation_id": "27df3efa-31f8-4bfd-b8f2-8e187d39b3c6", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.436342Z", "completed_at": "2025-05-12T06:57:14.471909Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.472251Z", "completed_at": "2025-05-12T06:57:14.472262Z"}], "thread_id": "Thread-1", "execution_time": 0.037705183029174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.dim_date", "compiled": true, "compiled_code": "\n\n-- Generate a date series from 2020-01-01 to 2025-12-31\nwith date_spine as (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2191\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2020-01-01' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2025-12-31' as date)\n\n)\n\nselect * from filtered\n\n\n),\n\ndates as (\n    select\n        cast(date_day as date) as date_key,\n        date_day,\n        extract(year from date_day) as year,\n        extract(month from date_day) as month,\n        extract(day from date_day) as day_of_month,\n        extract(quarter from date_day) as quarter,\n        extract(week from date_day) as week_of_year,\n        extract(dow from date_day) as day_of_week,\n        extract(doy from date_day) as day_of_year,\n        to_char(date_day, 'YYYY-MM') as year_month,\n        to_char(date_day, 'Month') as month_name,\n        to_char(date_day, 'Day') as day_name,\n        case\n            when extract(dow from date_day) in (0, 6) then true\n            else false\n        end as is_weekend,\n        case\n            when extract(month from date_day) in (1, 2, 3) then 'Q1'\n            when extract(month from date_day) in (4, 5, 6) then 'Q2'\n            when extract(month from date_day) in (7, 8, 9) then 'Q3'\n            else 'Q4'\n        end as quarter_name\n    from date_spine\n)\n\nselect * from dates", "relation_name": "\"dbt_db_ex3\".\"public\".\"dim_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.474671Z", "completed_at": "2025-05-12T06:57:14.478515Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.478777Z", "completed_at": "2025-05-12T06:57:14.478783Z"}], "thread_id": "Thread-1", "execution_time": 0.004731893539428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.stg_customers", "compiled": true, "compiled_code": "with source as (\n    select * from \"dbt_db_ex3\".\"public\".\"customers\"\n),\n\nstaged as (\n    select\n        customer_id,\n        name,\n        trim(lower(email)) as email,\n        coalesce(phone, 'Unknown') as phone,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * from staged", "relation_name": "\"dbt_db_ex3\".\"public\".\"stg_customers\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.479970Z", "completed_at": "2025-05-12T06:57:14.487194Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.487491Z", "completed_at": "2025-05-12T06:57:14.487498Z"}], "thread_id": "Thread-1", "execution_time": 0.00812077522277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.stg_order_items", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"dbt_db_ex3\".\"public\".\"order_items\"\n    \n    \n    where created_at >= (select max(created_at) from \"dbt_db_ex3\".\"public\".\"stg_order_items\")\n    \n),\n\nstaged as (\n    select\n        order_item_id,\n        order_id,\n        product_id,\n        greatest(quantity, 1) as quantity,\n        coalesce(unit_price, 0) as unit_price,\n        coalesce(discount_amount, 0) as discount_amount,\n        (quantity * unit_price) - coalesce(discount_amount, 0) as item_total,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * from staged", "relation_name": "\"dbt_db_ex3\".\"public\".\"stg_order_items\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.488768Z", "completed_at": "2025-05-12T06:57:14.492075Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.492324Z", "completed_at": "2025-05-12T06:57:14.492330Z"}], "thread_id": "Thread-1", "execution_time": 0.004185914993286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.stg_orders", "compiled": true, "compiled_code": "\n\nwith source as (\n    select * from \"dbt_db_ex3\".\"public\".\"orders\"\n    \n    \n    where created_at >= (select max(created_at) from \"dbt_db_ex3\".\"public\".\"stg_orders\")\n    \n),\n\nstaged as (\n    select\n        order_id,\n        customer_id,\n        order_date,\n        status,\n        payment_method,\n        shipping_address,\n        shipping_cost,\n        total_amount,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * from staged", "relation_name": "\"dbt_db_ex3\".\"public\".\"stg_orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.493580Z", "completed_at": "2025-05-12T06:57:14.496236Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.496495Z", "completed_at": "2025-05-12T06:57:14.496501Z"}], "thread_id": "Thread-1", "execution_time": 0.003606081008911133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.stg_products", "compiled": true, "compiled_code": "with source as (\n    select * from \"dbt_db_ex3\".\"public\".\"products\"\n),\n\nstaged as (\n    select\n        product_id,\n        name,\n        coalesce(price, 0) as price,\n        category,\n        coalesce(inventory_count, 0) as inventory_count,\n        is_active,\n        created_at,\n        updated_at\n    from source\n)\n\nselect * from staged", "relation_name": "\"dbt_db_ex3\".\"public\".\"stg_products\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.497674Z", "completed_at": "2025-05-12T06:57:14.501448Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.501699Z", "completed_at": "2025-05-12T06:57:14.501706Z"}], "thread_id": "Thread-1", "execution_time": 0.004612922668457031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.dim_customers", "compiled": true, "compiled_code": "with customers as (\n    select * from \"dbt_db_ex3\".\"public\".\"stg_customers\"\n),\n\ncustomer_orders as (\n    select\n        customer_id,\n        count(*) as order_count,\n        min(order_date) as first_order_date,\n        max(order_date) as most_recent_order_date,\n        sum(total_amount) as lifetime_value\n    from \"dbt_db_ex3\".\"public\".\"stg_orders\"\n    group by 1\n)\n\nselect\n    c.customer_id,\n    c.name,\n    c.email,\n    c.phone,\n    c.created_at,\n    coalesce(co.order_count, 0) as lifetime_orders,\n    co.first_order_date,\n    co.most_recent_order_date,\n    coalesce(co.lifetime_value, 0) as lifetime_value,\n    current_timestamp as updated_at\nfrom customers c\nleft join customer_orders co using (customer_id)", "relation_name": "\"dbt_db_ex3\".\"public\".\"dim_customers\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.503068Z", "completed_at": "2025-05-12T06:57:14.511279Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.511918Z", "completed_at": "2025-05-12T06:57:14.511927Z"}], "thread_id": "Thread-1", "execution_time": 0.009655952453613281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.fct_orders", "compiled": true, "compiled_code": "with orders as (\n    select * from \"dbt_db_ex3\".\"public\".\"stg_orders\"\n),\n\norder_items as (\n    select\n        order_id,\n        count(*) as number_of_items,\n        sum(quantity) as total_items,\n        sum(item_total) as items_subtotal\n    from \"dbt_db_ex3\".\"public\".\"stg_order_items\"\n    group by 1\n)\n\nselect\n    o.order_id,\n    o.customer_id,\n    o.order_date,\n    o.status,\n    o.payment_method,\n    o.shipping_address,\n    o.shipping_cost,\n    o.total_amount,\n    oi.number_of_items,\n    oi.total_items,\n    oi.items_subtotal,\n    (oi.items_subtotal + o.shipping_cost) as calculated_total,\n    abs(o.total_amount - (oi.items_subtotal + o.shipping_cost)) as total_amount_discrepancy,\n    o.created_at,\n    o.updated_at,\n    date_trunc('day', o.order_date) as order_day,\n    date_trunc('week', o.order_date) as order_week,\n    date_trunc('month', o.order_date) as order_month,\n    extract(hour from o.order_date) as order_hour\nfrom orders o\nleft join order_items oi using (order_id)", "relation_name": "\"dbt_db_ex3\".\"public\".\"fct_orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.513302Z", "completed_at": "2025-05-12T06:57:14.516800Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.517043Z", "completed_at": "2025-05-12T06:57:14.517048Z"}], "thread_id": "Thread-1", "execution_time": 0.004475831985473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.dim_products", "compiled": true, "compiled_code": "with products as (\n    select * from \"dbt_db_ex3\".\"public\".\"stg_products\"\n),\n\nproduct_sales as (\n    select\n        product_id,\n        sum(quantity) as total_quantity_sold,\n        sum(item_total) as total_revenue\n    from \"dbt_db_ex3\".\"public\".\"stg_order_items\"\n    group by 1\n)\n\nselect\n    p.product_id,\n    p.name,\n    p.price,\n    p.category,\n    p.inventory_count,\n    p.is_active,\n    p.created_at,\n    coalesce(ps.total_quantity_sold, 0) as total_quantity_sold,\n    coalesce(ps.total_revenue, 0) as total_revenue,\n    case\n        when p.inventory_count = 0 then 'Out of stock'\n        when p.inventory_count < 10 then 'Low stock'\n        else 'In stock'\n    end as inventory_status,\n    current_timestamp as updated_at\nfrom products p\nleft join product_sales ps using (product_id)", "relation_name": "\"dbt_db_ex3\".\"public\".\"dim_products\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.518278Z", "completed_at": "2025-05-12T06:57:14.520837Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.521065Z", "completed_at": "2025-05-12T06:57:14.521070Z"}], "thread_id": "Thread-1", "execution_time": 0.003431081771850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.fct_order_items", "compiled": true, "compiled_code": "with order_items as (\n    select * from \"dbt_db_ex3\".\"public\".\"stg_order_items\"\n),\n\norders as (\n    select * from \"dbt_db_ex3\".\"public\".\"stg_orders\"\n),\n\nproducts as (\n    select * from \"dbt_db_ex3\".\"public\".\"stg_products\"\n)\n\nselect\n    oi.order_item_id,\n    oi.order_id,\n    oi.product_id,\n    o.customer_id,\n    o.order_date,\n    p.category as product_category,\n    oi.quantity,\n    oi.unit_price,\n    oi.discount_amount,\n    oi.item_total,\n    (oi.unit_price * oi.quantity) as gross_item_sales_value,\n    oi.discount_amount as item_discount_value,\n    ((oi.unit_price * oi.quantity) - oi.item_total) as total_discount_impact,\n    case\n        when oi.discount_amount > 0 then true\n        else false\n    end as is_discounted,\n    o.status as order_status,\n    date_trunc('day', o.order_date) as order_day,\n    date_trunc('week', o.order_date) as order_week,\n    date_trunc('month', o.order_date) as order_month,\n    oi.created_at,\n    current_timestamp as updated_at\nfrom order_items oi\njoin orders o using (order_id)\njoin products p using (product_id)", "relation_name": "\"dbt_db_ex3\".\"public\".\"fct_order_items\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.522346Z", "completed_at": "2025-05-12T06:57:14.524832Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.525065Z", "completed_at": "2025-05-12T06:57:14.525070Z"}], "thread_id": "Thread-1", "execution_time": 0.0034270286560058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.dim_customers_mart", "compiled": true, "compiled_code": "\n\nwith customers as (\n    select * from \"dbt_db_ex3\".\"public\".\"dim_customers\"\n),\n\ncustomer_segments as (\n    select\n        customer_id,\n        case\n            when lifetime_value >= 1000000 then 'VIP'\n            when lifetime_value >= 500000 then 'High Value'\n            when lifetime_value >= 100000 then 'Medium Value'\n            else 'Low Value'\n        end as customer_segment,\n        case\n            when lifetime_orders >= 10 then 'Frequent'\n            when lifetime_orders >= 5 then 'Regular'\n            when lifetime_orders >= 2 then 'Occasional'\n            else 'One-time'\n        end as purchase_frequency,\n        case\n            when extract(day from (current_date - most_recent_order_date)) <= 30 then 'Active'\n            when extract(day from (current_date - most_recent_order_date)) <= 90 then 'Recent'\n            when extract(day from (current_date - most_recent_order_date)) <= 180 then 'Lapsed'\n            else 'Inactive'\n        end as customer_status\n    from customers\n    where lifetime_orders > 0\n)\n\nselect\n    c.*,\n    coalesce(cs.customer_segment, 'New') as customer_segment,\n    coalesce(cs.purchase_frequency, 'None') as purchase_frequency,\n    coalesce(cs.customer_status, 'New') as customer_status,\n    case\n        when cs.customer_segment = 'VIP' and cs.customer_status = 'Active' then true\n        else false\n    end as is_high_value_active\nfrom customers c\nleft join customer_segments cs using (customer_id)", "relation_name": "\"dbt_db_ex3\".\"public\".\"dim_customers_mart\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.526130Z", "completed_at": "2025-05-12T06:57:14.533607Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.533840Z", "completed_at": "2025-05-12T06:57:14.533844Z"}], "thread_id": "Thread-1", "execution_time": 0.008227825164794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_dim_customers_customer_id.dd91cd1c8d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"dbt_db_ex3\".\"public\".\"dim_customers\"\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.534911Z", "completed_at": "2025-05-12T06:57:14.537666Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.537892Z", "completed_at": "2025-05-12T06:57:14.537896Z"}], "thread_id": "Thread-1", "execution_time": 0.003495931625366211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_dim_customers_email.ed68b54d1a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect email\nfrom \"dbt_db_ex3\".\"public\".\"dim_customers\"\nwhere email is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.538924Z", "completed_at": "2025-05-12T06:57:14.542451Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.542689Z", "completed_at": "2025-05-12T06:57:14.542693Z"}], "thread_id": "Thread-1", "execution_time": 0.0042688846588134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_dim_customers_lifetime_orders.9712bd37b3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect lifetime_orders\nfrom \"dbt_db_ex3\".\"public\".\"dim_customers\"\nwhere lifetime_orders is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.543826Z", "completed_at": "2025-05-12T06:57:14.546698Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.546921Z", "completed_at": "2025-05-12T06:57:14.546926Z"}], "thread_id": "Thread-1", "execution_time": 0.0036759376525878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_dim_customers_lifetime_value.8655024888", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect lifetime_value\nfrom \"dbt_db_ex3\".\"public\".\"dim_customers\"\nwhere lifetime_value is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.547987Z", "completed_at": "2025-05-12T06:57:14.550746Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.550971Z", "completed_at": "2025-05-12T06:57:14.550976Z"}], "thread_id": "Thread-1", "execution_time": 0.0035049915313720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_dim_customers_name.e0448e04f1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"dbt_db_ex3\".\"public\".\"dim_customers\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.552016Z", "completed_at": "2025-05-12T06:57:14.556098Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.556331Z", "completed_at": "2025-05-12T06:57:14.556335Z"}], "thread_id": "Thread-1", "execution_time": 0.0048160552978515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.unique_dim_customers_customer_id.15c9f1e2fd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"dbt_db_ex3\".\"public\".\"dim_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.557373Z", "completed_at": "2025-05-12T06:57:14.560122Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.560348Z", "completed_at": "2025-05-12T06:57:14.560352Z"}], "thread_id": "Thread-1", "execution_time": 0.003473043441772461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.unique_dim_customers_email.0472f7c2e8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    email as unique_field,\n    count(*) as n_records\n\nfrom \"dbt_db_ex3\".\"public\".\"dim_customers\"\nwhere email is not null\ngroup by email\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.561383Z", "completed_at": "2025-05-12T06:57:14.564152Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.564380Z", "completed_at": "2025-05-12T06:57:14.564384Z"}], "thread_id": "Thread-1", "execution_time": 0.0034918785095214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.fct_customer_retention", "compiled": true, "compiled_code": "\n\nwith customer_orders as (\n    select\n        customer_id,\n        order_id,\n        order_date,\n        total_amount,\n        row_number() over(partition by customer_id order by order_date) as order_sequence,\n        lead(order_date) over(partition by customer_id order by order_date) as next_order_date,\n        extract(day from (lead(order_date) over(partition by customer_id order by order_date) - order_date)) as days_until_next_order\n    from \"dbt_db_ex3\".\"public\".\"fct_orders\"\n),\n\ncustomer_first_orders as (\n    select\n        customer_id,\n        min(case when order_sequence = 1 then order_date end) as first_order_date,\n        extract(year from min(case when order_sequence = 1 then order_date end)) as first_order_year,\n        extract(month from min(case when order_sequence = 1 then order_date end)) as first_order_month,\n        to_char(min(case when order_sequence = 1 then order_date end), 'YYYY-MM') as first_order_year_month\n    from customer_orders\n    group by 1\n),\n\nrepeat_purchase_facts as (\n    select\n        c.customer_id,\n        c.first_order_date,\n        c.first_order_year,\n        c.first_order_month,\n        c.first_order_year_month,\n        count(distinct case when co.order_sequence > 1 then co.order_id end) as repeat_orders,\n        max(co.order_sequence) as total_orders,\n        sum(case when co.order_sequence > 1 then co.total_amount else 0 end) as repeat_order_revenue,\n        min(case when co.order_sequence = 2 then co.order_date end) as second_order_date,\n        avg(co.days_until_next_order) as avg_days_between_orders\n    from customer_first_orders c\n    left join customer_orders co using (customer_id)\n    group by 1, 2, 3, 4, 5\n),\n\ncohort_sizes as (\n    select\n        first_order_year,\n        first_order_month,\n        first_order_year_month,\n        count(distinct customer_id) as cohort_size\n    from customer_first_orders\n    group by 1, 2, 3\n),\n\nretention_by_month as (\n    select\n        c.first_order_year,\n        c.first_order_month,\n        c.first_order_year_month,\n        cs.cohort_size,\n        date_part('month', age(date_trunc('month', o.order_date), \n                              date_trunc('month', c.first_order_date))) as months_since_first_order,\n        count(distinct o.customer_id) as retained_customers,\n        sum(o.total_amount) as cohort_revenue\n    from customer_first_orders c\n    join \"dbt_db_ex3\".\"public\".\"fct_orders\" o using(customer_id)\n    join cohort_sizes cs \n        on c.first_order_year = cs.first_order_year \n        and c.first_order_month = cs.first_order_month\n    where o.order_date > c.first_order_date\n    group by 1, 2, 3, 4, 5\n)\n\nselect\n    r.first_order_year,\n    r.first_order_month,\n    r.first_order_year_month as cohort,\n    r.cohort_size,\n    r.months_since_first_order,\n    r.retained_customers,\n    r.cohort_revenue,\n    (r.retained_customers::float / r.cohort_size) * 100 as retention_rate,\n    (r.cohort_revenue::float / r.retained_customers) as revenue_per_retained_customer,\n    sum(r.retained_customers) over (\n        partition by r.first_order_year, r.first_order_month\n        order by r.months_since_first_order\n        rows between unbounded preceding and current row\n    ) as cumulative_retained_customers,\n    sum(r.cohort_revenue) over (\n        partition by r.first_order_year, r.first_order_month\n        order by r.months_since_first_order\n        rows between unbounded preceding and current row\n    ) as cumulative_cohort_revenue,\n    current_timestamp as updated_at\nfrom retention_by_month r\norder by r.first_order_year, r.first_order_month, r.months_since_first_order", "relation_name": "\"dbt_db_ex3\".\"public\".\"fct_customer_retention\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.565453Z", "completed_at": "2025-05-12T06:57:14.572562Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.572802Z", "completed_at": "2025-05-12T06:57:14.572807Z"}], "thread_id": "Thread-1", "execution_time": 0.007877826690673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.accepted_values_fct_orders_status__completed__processing__cancelled__refunded.2a979f9339", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"dbt_db_ex3\".\"public\".\"fct_orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'completed','processing','cancelled','refunded'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.573857Z", "completed_at": "2025-05-12T06:57:14.576608Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.576835Z", "completed_at": "2025-05-12T06:57:14.576839Z"}], "thread_id": "Thread-1", "execution_time": 0.0034759044647216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_orders_customer_id.16fe324f7b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"dbt_db_ex3\".\"public\".\"fct_orders\"\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.577865Z", "completed_at": "2025-05-12T06:57:14.580944Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.581190Z", "completed_at": "2025-05-12T06:57:14.581195Z"}], "thread_id": "Thread-1", "execution_time": 0.0038290023803710938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_orders_order_date.84f0a76362", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom \"dbt_db_ex3\".\"public\".\"fct_orders\"\nwhere order_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.582255Z", "completed_at": "2025-05-12T06:57:14.585565Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.585819Z", "completed_at": "2025-05-12T06:57:14.585824Z"}], "thread_id": "Thread-1", "execution_time": 0.0040760040283203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_orders_order_id.4e687af8d0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dbt_db_ex3\".\"public\".\"fct_orders\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.586892Z", "completed_at": "2025-05-12T06:57:14.589707Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.589939Z", "completed_at": "2025-05-12T06:57:14.589943Z"}], "thread_id": "Thread-1", "execution_time": 0.003554821014404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_orders_status.1455048989", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom \"dbt_db_ex3\".\"public\".\"fct_orders\"\nwhere status is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.590979Z", "completed_at": "2025-05-12T06:57:14.594505Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.594740Z", "completed_at": "2025-05-12T06:57:14.594745Z"}], "thread_id": "Thread-1", "execution_time": 0.004263162612915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_orders_total_amount.f8b7bfac38", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_amount\nfrom \"dbt_db_ex3\".\"public\".\"fct_orders\"\nwhere total_amount is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.595853Z", "completed_at": "2025-05-12T06:57:14.601457Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.601702Z", "completed_at": "2025-05-12T06:57:14.601708Z"}], "thread_id": "Thread-1", "execution_time": 0.006407976150512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"dbt_db_ex3\".\"public\".\"fct_orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"dbt_db_ex3\".\"public\".\"dim_customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.602786Z", "completed_at": "2025-05-12T06:57:14.605568Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.605796Z", "completed_at": "2025-05-12T06:57:14.605801Z"}], "thread_id": "Thread-1", "execution_time": 0.0035200119018554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.unique_fct_orders_order_id.523ddb6ce5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"dbt_db_ex3\".\"public\".\"fct_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.606875Z", "completed_at": "2025-05-12T06:57:14.609323Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.609548Z", "completed_at": "2025-05-12T06:57:14.609553Z"}], "thread_id": "Thread-1", "execution_time": 0.0031850337982177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.dim_products_mart", "compiled": true, "compiled_code": "\n\nwith products as (\n    select * from \"dbt_db_ex3\".\"public\".\"dim_products\"\n)\n\nselect\n    p.*,\n    case\n        when total_quantity_sold > 100 then 'High Selling'\n        when total_quantity_sold > 50 then 'Medium Selling'\n        when total_quantity_sold > 0 then 'Low Selling'\n        else 'Not Selling'\n    end as sales_performance,\n    case\n        when total_revenue > 10000000 then 'High Revenue'\n        when total_revenue > 5000000 then 'Medium Revenue'\n        when total_revenue > 0 then 'Low Revenue'\n        else 'No Revenue'\n    end as revenue_tier,\n    (total_revenue / nullif(total_quantity_sold, 0)) as average_selling_price,\n    case\n        when is_active = true and inventory_status != 'Out of stock' then true\n        else false\n    end as is_available_for_purchase,\n    case\n        when is_active = false then 'Discontinued'\n        when inventory_status = 'Out of stock' then 'Temporarily Unavailable'\n        else 'Available'\n    end as availability_status\nfrom products p", "relation_name": "\"dbt_db_ex3\".\"public\".\"dim_products_mart\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.610622Z", "completed_at": "2025-05-12T06:57:14.617117Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.617367Z", "completed_at": "2025-05-12T06:57:14.617372Z"}], "thread_id": "Thread-1", "execution_time": 0.007277011871337891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.accepted_values_dim_products_category__Electronics__Clothing__Footwear__Accessories.e081bd3fbd", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        category as value_field,\n        count(*) as n_records\n\n    from \"dbt_db_ex3\".\"public\".\"dim_products\"\n    group by category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Electronics','Clothing','Footwear','Accessories'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.618486Z", "completed_at": "2025-05-12T06:57:14.621448Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.621679Z", "completed_at": "2025-05-12T06:57:14.621683Z"}], "thread_id": "Thread-1", "execution_time": 0.00372314453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_dim_products_category.b4c6ea8fb0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect category\nfrom \"dbt_db_ex3\".\"public\".\"dim_products\"\nwhere category is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.622746Z", "completed_at": "2025-05-12T06:57:14.627819Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.628061Z", "completed_at": "2025-05-12T06:57:14.628067Z"}], "thread_id": "Thread-1", "execution_time": 0.005836009979248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_dim_products_inventory_count.ac9dd6f09e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_count\nfrom \"dbt_db_ex3\".\"public\".\"dim_products\"\nwhere inventory_count is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.629169Z", "completed_at": "2025-05-12T06:57:14.632622Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.632863Z", "completed_at": "2025-05-12T06:57:14.632867Z"}], "thread_id": "Thread-1", "execution_time": 0.004230022430419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_dim_products_name.bffc7524ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"dbt_db_ex3\".\"public\".\"dim_products\"\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.633928Z", "completed_at": "2025-05-12T06:57:14.636822Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.637048Z", "completed_at": "2025-05-12T06:57:14.637053Z"}], "thread_id": "Thread-1", "execution_time": 0.0036301612854003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_dim_products_price.93519fc0ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom \"dbt_db_ex3\".\"public\".\"dim_products\"\nwhere price is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.638103Z", "completed_at": "2025-05-12T06:57:14.640961Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.641187Z", "completed_at": "2025-05-12T06:57:14.641191Z"}], "thread_id": "Thread-1", "execution_time": 0.003590106964111328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_dim_products_product_id.c8aba288d1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"dbt_db_ex3\".\"public\".\"dim_products\"\nwhere product_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.642240Z", "completed_at": "2025-05-12T06:57:14.645012Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.645238Z", "completed_at": "2025-05-12T06:57:14.645242Z"}], "thread_id": "Thread-1", "execution_time": 0.0034999847412109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.unique_dim_products_product_id.ef7b2a9985", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_id as unique_field,\n    count(*) as n_records\n\nfrom \"dbt_db_ex3\".\"public\".\"dim_products\"\nwhere product_id is not null\ngroup by product_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.646292Z", "completed_at": "2025-05-12T06:57:14.649922Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.650150Z", "completed_at": "2025-05-12T06:57:14.650154Z"}], "thread_id": "Thread-1", "execution_time": 0.004389047622680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.fct_daily_sales", "compiled": true, "compiled_code": "\n\nwith order_facts as (\n    select\n        date_trunc('day', order_date) as order_day,\n        count(distinct order_id) as orders_count,\n        count(distinct customer_id) as customers_count,\n        sum(total_amount) as total_sales_amount,\n        sum(shipping_cost) as total_shipping_cost,\n        sum(total_amount - shipping_cost) as total_product_revenue,\n        avg(total_amount) as average_order_value,\n        sum(total_items) as total_items_sold\n    from \"dbt_db_ex3\".\"public\".\"fct_orders\"\n    group by 1\n),\n\nproduct_category_facts as (\n    select\n        date_trunc('day', order_date) as order_day,\n        product_category,\n        count(distinct order_id) as category_orders_count,\n        sum(item_total) as category_revenue,\n        sum(quantity) as category_items_sold\n    from \"dbt_db_ex3\".\"public\".\"fct_order_items\"\n    group by 1, 2\n)\n\nselect\n    d.date_key,\n    d.year,\n    d.month,\n    d.quarter,\n    d.day_of_month,\n    d.day_of_week,\n    d.is_weekend,\n    d.month_name,\n    coalesce(o.orders_count, 0) as orders_count,\n    coalesce(o.customers_count, 0) as customers_count,\n    coalesce(o.total_sales_amount, 0) as total_sales_amount,\n    coalesce(o.total_shipping_cost, 0) as total_shipping_cost,\n    coalesce(o.total_product_revenue, 0) as total_product_revenue,\n    coalesce(o.average_order_value, 0) as average_order_value,\n    coalesce(o.total_items_sold, 0) as total_items_sold,\n    -- Metrics specific to each product category\n    coalesce(pc_electronics.category_revenue, 0) as electronics_revenue,\n    coalesce(pc_clothing.category_revenue, 0) as clothing_revenue,\n    coalesce(pc_footwear.category_revenue, 0) as footwear_revenue,\n    coalesce(pc_accessories.category_revenue, 0) as accessories_revenue,\n    -- Calculated metrics\n    case \n        when coalesce(o.orders_count, 0) = 0 then 0\n        else coalesce(o.customers_count, 0)::float / o.orders_count \n    end as customers_per_order_ratio,\n    current_timestamp as updated_at\nfrom \"dbt_db_ex3\".\"public\".\"dim_date\" d\nleft join order_facts o on d.date_key = o.order_day\nleft join product_category_facts pc_electronics \n    on d.date_key = pc_electronics.order_day and pc_electronics.product_category = 'Electronics'\nleft join product_category_facts pc_clothing \n    on d.date_key = pc_clothing.order_day and pc_clothing.product_category = 'Clothing'\nleft join product_category_facts pc_footwear \n    on d.date_key = pc_footwear.order_day and pc_footwear.product_category = 'Footwear'\nleft join product_category_facts pc_accessories \n    on d.date_key = pc_accessories.order_day and pc_accessories.product_category = 'Accessories'\nwhere d.date_key <= current_date", "relation_name": "\"dbt_db_ex3\".\"public\".\"fct_daily_sales\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.651275Z", "completed_at": "2025-05-12T06:57:14.654791Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.655027Z", "completed_at": "2025-05-12T06:57:14.655032Z"}], "thread_id": "Thread-1", "execution_time": 0.004289865493774414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.fct_monthly_sales", "compiled": true, "compiled_code": "\n\nwith monthly_order_facts as (\n    select\n        extract(year from order_date) as year,\n        extract(month from order_date) as month,\n        to_char(order_date, 'YYYY-MM') as year_month,\n        count(distinct order_id) as orders_count,\n        count(distinct customer_id) as unique_customers,\n        sum(total_amount) as total_sales_amount,\n        sum(shipping_cost) as total_shipping_cost,\n        avg(total_amount) as average_order_value,\n        sum(total_items) as total_items_sold,\n        count(distinct case when status = 'completed' then order_id end) as completed_orders,\n        count(distinct case when status = 'cancelled' then order_id end) as cancelled_orders\n    from \"dbt_db_ex3\".\"public\".\"fct_orders\"\n    group by 1, 2, 3\n),\n\nmonthly_product_category_sales as (\n    select\n        extract(year from order_date) as year,\n        extract(month from order_date) as month,\n        product_category,\n        sum(item_total) as category_sales,\n        count(distinct order_id) as category_orders,\n        sum(quantity) as category_items_sold\n    from \"dbt_db_ex3\".\"public\".\"fct_order_items\"\n    group by 1, 2, 3\n),\n\nmonthly_new_customers as (\n    select\n        extract(year from first_order_date) as year,\n        extract(month from first_order_date) as month,\n        count(distinct customer_id) as new_customers\n    from \"dbt_db_ex3\".\"public\".\"dim_customers\"\n    where first_order_date is not null\n    group by 1, 2\n)\n\nselect\n    m.year,\n    m.month,\n    m.year_month,\n    m.orders_count,\n    m.unique_customers,\n    m.total_sales_amount,\n    m.total_shipping_cost,\n    m.average_order_value,\n    m.total_items_sold,\n    m.completed_orders,\n    m.cancelled_orders,\n    coalesce(pc_electronics.category_sales, 0) as electronics_sales,\n    coalesce(pc_clothing.category_sales, 0) as clothing_sales,\n    coalesce(pc_footwear.category_sales, 0) as footwear_sales,\n    coalesce(pc_accessories.category_sales, 0) as accessories_sales,\n    coalesce(pc_electronics.category_items_sold, 0) as electronics_items_sold,\n    coalesce(pc_clothing.category_items_sold, 0) as clothing_items_sold,\n    coalesce(pc_footwear.category_items_sold, 0) as footwear_items_sold,\n    coalesce(pc_accessories.category_items_sold, 0) as accessories_items_sold,\n    coalesce(nc.new_customers, 0) as new_customers,\n    case \n        when m.orders_count = 0 then 0\n        else (m.cancelled_orders::float / m.orders_count) * 100\n    end as cancellation_rate,\n    case\n        when lag(m.total_sales_amount) over (order by m.year, m.month) = 0 then null\n        else (m.total_sales_amount - lag(m.total_sales_amount) over (order by m.year, m.month)) / \n             lag(m.total_sales_amount) over (order by m.year, m.month) * 100\n    end as sales_growth_pct,\n    current_timestamp as updated_at\nfrom monthly_order_facts m\nleft join monthly_new_customers nc on m.year = nc.year and m.month = nc.month\nleft join monthly_product_category_sales pc_electronics \n    on m.year = pc_electronics.year and m.month = pc_electronics.month and pc_electronics.product_category = 'Electronics'\nleft join monthly_product_category_sales pc_clothing \n    on m.year = pc_clothing.year and m.month = pc_clothing.month and pc_clothing.product_category = 'Clothing'\nleft join monthly_product_category_sales pc_footwear \n    on m.year = pc_footwear.year and m.month = pc_footwear.month and pc_footwear.product_category = 'Footwear'\nleft join monthly_product_category_sales pc_accessories \n    on m.year = pc_accessories.year and m.month = pc_accessories.month and pc_accessories.product_category = 'Accessories'\n\n\nwhere m.year || '-' || lpad(m.month::text, 2, '0') >= (select max(year || '-' || lpad(month::text, 2, '0')) from \"dbt_db_ex3\".\"public\".\"fct_monthly_sales\")\n", "relation_name": "\"dbt_db_ex3\".\"public\".\"fct_monthly_sales\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.656137Z", "completed_at": "2025-05-12T06:57:14.658972Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.659201Z", "completed_at": "2025-05-12T06:57:14.659205Z"}], "thread_id": "Thread-1", "execution_time": 0.0036029815673828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_order_items_item_total.d3cdfdf7d6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect item_total\nfrom \"dbt_db_ex3\".\"public\".\"fct_order_items\"\nwhere item_total is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.660315Z", "completed_at": "2025-05-12T06:57:14.663180Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.663409Z", "completed_at": "2025-05-12T06:57:14.663413Z"}], "thread_id": "Thread-1", "execution_time": 0.0036170482635498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_order_items_order_id.e887a2de02", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dbt_db_ex3\".\"public\".\"fct_order_items\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.664467Z", "completed_at": "2025-05-12T06:57:14.667236Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.667478Z", "completed_at": "2025-05-12T06:57:14.667482Z"}], "thread_id": "Thread-1", "execution_time": 0.0035178661346435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_order_items_order_item_id.dbaab21f55", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_item_id\nfrom \"dbt_db_ex3\".\"public\".\"fct_order_items\"\nwhere order_item_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.668531Z", "completed_at": "2025-05-12T06:57:14.671289Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.671516Z", "completed_at": "2025-05-12T06:57:14.671520Z"}], "thread_id": "Thread-1", "execution_time": 0.0034830570220947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_order_items_product_id.6fbedef7dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"dbt_db_ex3\".\"public\".\"fct_order_items\"\nwhere product_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.672555Z", "completed_at": "2025-05-12T06:57:14.676066Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.676292Z", "completed_at": "2025-05-12T06:57:14.676296Z"}], "thread_id": "Thread-1", "execution_time": 0.004239082336425781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_order_items_quantity.2785769c03", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity\nfrom \"dbt_db_ex3\".\"public\".\"fct_order_items\"\nwhere quantity is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.677340Z", "completed_at": "2025-05-12T06:57:14.680137Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.680364Z", "completed_at": "2025-05-12T06:57:14.680368Z"}], "thread_id": "Thread-1", "execution_time": 0.003526926040649414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_fct_order_items_unit_price.25a5837cb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unit_price\nfrom \"dbt_db_ex3\".\"public\".\"fct_order_items\"\nwhere unit_price is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.681416Z", "completed_at": "2025-05-12T06:57:14.685141Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.685374Z", "completed_at": "2025-05-12T06:57:14.685378Z"}], "thread_id": "Thread-1", "execution_time": 0.004466056823730469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.relationships_fct_order_items_order_id__order_id__ref_fct_orders_.f1e7dbc0ec", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select order_id as from_field\n    from \"dbt_db_ex3\".\"public\".\"fct_order_items\"\n    where order_id is not null\n),\n\nparent as (\n    select order_id as to_field\n    from \"dbt_db_ex3\".\"public\".\"fct_orders\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.686440Z", "completed_at": "2025-05-12T06:57:14.690113Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.690344Z", "completed_at": "2025-05-12T06:57:14.690348Z"}], "thread_id": "Thread-1", "execution_time": 0.004419803619384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.relationships_fct_order_items_product_id__product_id__ref_dim_products_.adfb860dd1", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_id as from_field\n    from \"dbt_db_ex3\".\"public\".\"fct_order_items\"\n    where product_id is not null\n),\n\nparent as (\n    select product_id as to_field\n    from \"dbt_db_ex3\".\"public\".\"dim_products\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.691410Z", "completed_at": "2025-05-12T06:57:14.694151Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.694376Z", "completed_at": "2025-05-12T06:57:14.694380Z"}], "thread_id": "Thread-1", "execution_time": 0.0034689903259277344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.unique_fct_order_items_order_item_id.0dec5f6768", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"dbt_db_ex3\".\"public\".\"fct_order_items\"\nwhere order_item_id is not null\ngroup by order_item_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.695408Z", "completed_at": "2025-05-12T06:57:14.698648Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.698880Z", "completed_at": "2025-05-12T06:57:14.698885Z"}], "thread_id": "Thread-1", "execution_time": 0.003981113433837891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.metric_customer_retention", "compiled": true, "compiled_code": "\n\n-- This is a materialized view that consolidates customer retention metrics\n-- for easier analytics consumption\n\nselect\n    first_order_year,\n    first_order_month,\n    cohort,\n    cohort_size,\n    months_since_first_order,\n    retained_customers,\n    cohort_revenue,\n    retention_rate,\n    revenue_per_retained_customer,\n    cumulative_retained_customers,\n    cumulative_cohort_revenue,\n    -- Additional calculated metrics\n    (cumulative_retained_customers::float / nullif(cohort_size, 0)) * 100 as cumulative_retention_rate,\n    (cumulative_cohort_revenue::float / nullif(cumulative_retained_customers, 0)) as cumulative_revenue_per_customer,\n    (retained_customers::float / nullif(lag(retained_customers) over (\n        partition by cohort \n        order by months_since_first_order\n    ), 0)) * 100 as month_over_month_retention_change,\n    case\n        when months_since_first_order >= 1 and months_since_first_order <= 3 then 'Early Stage'\n        when months_since_first_order > 3 and months_since_first_order <= 6 then 'Mid Stage'\n        when months_since_first_order > 6 and months_since_first_order <= 12 then 'Late Stage'\n        else 'Long Term'\n    end as retention_stage,\n    current_timestamp as updated_at\nfrom \"dbt_db_ex3\".\"public\".\"fct_customer_retention\"", "relation_name": "\"dbt_db_ex3\".\"public\".\"metric_customer_retention\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.699997Z", "completed_at": "2025-05-12T06:57:14.702528Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.702758Z", "completed_at": "2025-05-12T06:57:14.702762Z"}], "thread_id": "Thread-1", "execution_time": 0.0033080577850341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.metric_daily_sales", "compiled": true, "compiled_code": "\n\n-- This is a materialized view that consolidates daily sales metrics\n-- for easier analytics consumption\n\nselect\n    date_key,\n    year,\n    month,\n    quarter,\n    day_of_month,\n    day_of_week,\n    is_weekend,\n    month_name,\n    orders_count,\n    customers_count,\n    total_sales_amount,\n    total_shipping_cost,\n    total_product_revenue,\n    average_order_value,\n    total_items_sold,\n    electronics_revenue,\n    clothing_revenue,\n    footwear_revenue,\n    accessories_revenue,\n    -- Additional calculated metrics\n    case \n        when orders_count = 0 then 0 \n        else total_sales_amount / orders_count \n    end as revenue_per_order,\n    case \n        when customers_count = 0 then 0 \n        else total_sales_amount / customers_count \n    end as revenue_per_customer,\n    case \n        when total_sales_amount = 0 then 0 \n        else electronics_revenue / total_sales_amount * 100 \n    end as electronics_revenue_pct,\n    case \n        when total_sales_amount = 0 then 0 \n        else clothing_revenue / total_sales_amount * 100 \n    end as clothing_revenue_pct,\n    case \n        when total_sales_amount = 0 then 0 \n        else footwear_revenue / total_sales_amount * 100 \n    end as footwear_revenue_pct,\n    case \n        when total_sales_amount = 0 then 0 \n        else accessories_revenue / total_sales_amount * 100 \n    end as accessories_revenue_pct,\n    current_timestamp as updated_at\nfrom \"dbt_db_ex3\".\"public\".\"fct_daily_sales\"", "relation_name": "\"dbt_db_ex3\".\"public\".\"metric_daily_sales\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.703841Z", "completed_at": "2025-05-12T06:57:14.706426Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.706657Z", "completed_at": "2025-05-12T06:57:14.706661Z"}], "thread_id": "Thread-1", "execution_time": 0.003353118896484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ecommerce_datamart.metric_monthly_sales", "compiled": true, "compiled_code": "\n\n-- This is a materialized view that consolidates monthly sales metrics\n-- for easier analytics consumption\n\nselect\n    year,\n    month,\n    year_month,\n    orders_count,\n    unique_customers,\n    total_sales_amount,\n    total_shipping_cost,\n    average_order_value,\n    total_items_sold,\n    completed_orders,\n    cancelled_orders,\n    electronics_sales,\n    clothing_sales,\n    footwear_sales,\n    accessories_sales,\n    electronics_items_sold,\n    clothing_items_sold,\n    footwear_items_sold,\n    accessories_items_sold,\n    new_customers,\n    cancellation_rate,\n    sales_growth_pct,\n    -- Additional calculated metrics\n    case\n        when lag(new_customers) over (order by year, month) = 0 then null\n        else (new_customers - lag(new_customers) over (order by year, month)) / \n             nullif(lag(new_customers) over (order by year, month), 0) * 100\n    end as new_customer_growth_pct,\n    case \n        when unique_customers = 0 then 0 \n        else total_sales_amount / unique_customers \n    end as revenue_per_customer,\n    (completed_orders::float / nullif(orders_count, 0)) * 100 as completion_rate,\n    case\n        when total_sales_amount = 0 then 0\n        else electronics_sales / total_sales_amount * 100\n    end as electronics_sales_pct,\n    case\n        when total_sales_amount = 0 then 0\n        else clothing_sales / total_sales_amount * 100\n    end as clothing_sales_pct,\n    case\n        when total_sales_amount = 0 then 0\n        else footwear_sales / total_sales_amount * 100\n    end as footwear_sales_pct,\n    case\n        when total_sales_amount = 0 then 0\n        else accessories_sales / total_sales_amount * 100\n    end as accessories_sales_pct,\n    current_timestamp as updated_at\nfrom \"dbt_db_ex3\".\"public\".\"fct_monthly_sales\"", "relation_name": "\"dbt_db_ex3\".\"public\".\"metric_monthly_sales\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.707742Z", "completed_at": "2025-05-12T06:57:14.709962Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.710186Z", "completed_at": "2025-05-12T06:57:14.710190Z"}], "thread_id": "Thread-1", "execution_time": 0.0029549598693847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.assert_retention_rate_decreases", "compiled": true, "compiled_code": "/*\n  Custom test to verify that retention rates generally decrease over time\n  for any given cohort. This is a typical pattern in retention analysis.\n*/\n\nwith retention_rates as (\n    select\n        cohort,\n        months_since_first_order,\n        retention_rate,\n        lead(retention_rate) over (\n            partition by cohort\n            order by months_since_first_order\n        ) as next_month_retention_rate\n    from \"dbt_db_ex3\".\"public\".\"metric_customer_retention\"\n    where months_since_first_order > 0\n),\n\npotential_issues as (\n    select\n        cohort,\n        months_since_first_order,\n        retention_rate,\n        next_month_retention_rate,\n        next_month_retention_rate - retention_rate as retention_rate_change\n    from retention_rates\n    where\n        -- Check for months where retention rate increased by more than 20 percentage points\n        -- Some increase can happen due to seasonality, delayed purchases, etc.\n        -- but large unexpected increases should be investigated\n        next_month_retention_rate is not null\n        and next_month_retention_rate > retention_rate\n        and (next_month_retention_rate - retention_rate) > 20\n)\n\nselect * from potential_issues", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.711221Z", "completed_at": "2025-05-12T06:57:14.714300Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.714532Z", "completed_at": "2025-05-12T06:57:14.714537Z"}], "thread_id": "Thread-1", "execution_time": 0.0038127899169921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.not_null_metric_daily_sales_date_key.6d6c4a8875", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_key\nfrom \"dbt_db_ex3\".\"public\".\"metric_daily_sales\"\nwhere date_key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.715592Z", "completed_at": "2025-05-12T06:57:14.718546Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.718784Z", "completed_at": "2025-05-12T06:57:14.718788Z"}], "thread_id": "Thread-1", "execution_time": 0.0037031173706054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.unique_metric_daily_sales_date_key.5f5035b1ea", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date_key as unique_field,\n    count(*) as n_records\n\nfrom \"dbt_db_ex3\".\"public\".\"metric_daily_sales\"\nwhere date_key is not null\ngroup by date_key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-05-12T06:57:14.720486Z", "completed_at": "2025-05-12T06:57:14.725219Z"}, {"name": "execute", "started_at": "2025-05-12T06:57:14.725689Z", "completed_at": "2025-05-12T06:57:14.725693Z"}], "thread_id": "Thread-1", "execution_time": 0.006346940994262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.ecommerce_datamart.assert_metrics_consistency", "compiled": true, "compiled_code": "/*\n  Custom test to verify consistency between daily and monthly metrics aggregations.\n  This test ensures the sum of daily metrics for a month matches the monthly metrics.\n*/\n\nwith daily_metrics as (\n    select\n        extract(year from date_key) as year,\n        extract(month from date_key) as month,\n        sum(total_sales_amount) as daily_sum_sales,\n        sum(orders_count) as daily_sum_orders,\n        sum(customers_count) as daily_sum_customers\n    from \"dbt_db_ex3\".\"public\".\"metric_daily_sales\"\n    group by 1, 2\n),\n\nmonthly_metrics as (\n    select\n        year,\n        month,\n        total_sales_amount as monthly_sales,\n        orders_count as monthly_orders,\n        unique_customers as monthly_customers\n    from \"dbt_db_ex3\".\"public\".\"metric_monthly_sales\"\n),\n\ncompared as (\n    select\n        d.year,\n        d.month,\n        d.daily_sum_sales,\n        m.monthly_sales,\n        abs(d.daily_sum_sales - m.monthly_sales) as sales_difference,\n        d.daily_sum_orders,\n        m.monthly_orders,\n        abs(d.daily_sum_orders - m.monthly_orders) as orders_difference,\n        d.daily_sum_customers,\n        m.monthly_customers,\n        abs(d.daily_sum_customers - m.monthly_customers) as customers_difference\n    from daily_metrics d\n    join monthly_metrics m \n        on d.year = m.year \n        and d.month = m.month\n)\n\nselect * \nfrom compared \nwhere \n    sales_difference > 0.01 or -- Allow small rounding differences\n    orders_difference > 0 or\n    customers_difference > 0", "relation_name": null, "batch_results": null}], "elapsed_time": 0.36626410484313965, "args": {"which": "generate", "select": [], "macro_debugging": false, "partial_parse_file_diff": true, "partial_parse": true, "log_format_file": "debug", "version_check": true, "quiet": false, "log_level": "info", "require_resource_names_without_spaces": false, "skip_nodes_if_on_run_start_fails": false, "state_modified_compare_more_unrendered_values": false, "use_colors_file": true, "project_dir": "/Users/user/Desktop/Data-Engineering/Day12/Ex3/ecommerce_dbt", "use_colors": true, "favor_state": false, "require_explicit_package_overrides_for_builtin_materializations": true, "strict_mode": false, "compile": true, "populate_cache": true, "log_level_file": "debug", "write_json": true, "profiles_dir": "/Users/user/.dbt", "warn_error_options": {"include": [], "exclude": []}, "indirect_selection": "eager", "require_nested_cumulative_type_params": false, "static_parser": true, "log_format": "default", "empty_catalog": false, "require_batched_execution_for_custom_microbatch_strategy": false, "show_resource_report": false, "static": false, "defer": false, "introspect": true, "state_modified_compare_vars": false, "exclude": [], "invocation_command": "dbt docs generate", "log_path": "/Users/user/Desktop/Data-Engineering/Day12/Ex3/ecommerce_dbt/logs", "require_yaml_configuration_for_mf_time_spines": false, "printer_width": 80, "send_anonymous_usage_stats": true, "vars": {}, "print": true, "log_file_max_bytes": 10485760, "source_freshness_run_project_hooks": false, "cache_selected_only": false}}